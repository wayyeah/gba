2023-09-01 18:03:11,024   INFO  **********************Start logging**********************
2023-09-01 18:03:11,025   INFO  CUDA_VISIBLE_DEVICES=0
2023-09-01 18:03:11,025   INFO  cfg_file         cfgs/xmu_ouster_models/centerpoint.yaml
2023-09-01 18:03:11,025   INFO  batch_size       1
2023-09-01 18:03:11,025   INFO  epochs           50
2023-09-01 18:03:11,025   INFO  workers          1
2023-09-01 18:03:11,025   INFO  extra_tag        default
2023-09-01 18:03:11,025   INFO  ckpt             None
2023-09-01 18:03:11,025   INFO  pretrained_model None
2023-09-01 18:03:11,025   INFO  launcher         none
2023-09-01 18:03:11,025   INFO  tcp_port         18888
2023-09-01 18:03:11,025   INFO  sync_bn          False
2023-09-01 18:03:11,025   INFO  fix_random_seed  False
2023-09-01 18:03:11,025   INFO  ckpt_save_interval 1
2023-09-01 18:03:11,025   INFO  local_rank       0
2023-09-01 18:03:11,025   INFO  max_ckpt_save_num 30
2023-09-01 18:03:11,025   INFO  merge_all_iters_to_one_epoch False
2023-09-01 18:03:11,025   INFO  set_cfgs         None
2023-09-01 18:03:11,026   INFO  max_waiting_mins 0
2023-09-01 18:03:11,026   INFO  start_epoch      0
2023-09-01 18:03:11,026   INFO  save_to_file     False
2023-09-01 18:03:11,026   INFO  cfg.ROOT_DIR: /home/djh/projects/xmuda/OpenPCDet
2023-09-01 18:03:11,026   INFO  cfg.LOCAL_RANK: 0
2023-09-01 18:03:11,026   INFO  cfg.CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']
2023-09-01 18:03:11,026   INFO  
cfg.DATA_CONFIG = edict()
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.DATASET: XMechanismUnmanned
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/xmu
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.SENSOR: ouster
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [0, -75, -2, 150, 75, 4]
2023-09-01 18:03:11,026   INFO  
cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING = edict()
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.Car: Car
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.Truck: Car
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.Bus: Car
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.Semi-Trailer towing vehicle: Car
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.Special Vehicles: Car
2023-09-01 18:03:11,026   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.Ped_adult: Pedestrian
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.Ped_children: Pedestrian
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.ByCyc: Cyclist
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.TRAINING_CATEGORIES_MAPPING.MotorCyc: Cyclist
2023-09-01 18:03:11,027   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2023-09-01 18:03:11,027   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['xmu_infos_train.pkl']
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['xmu_infos_val.pkl']
2023-09-01 18:03:11,027   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2023-09-01 18:03:11,027   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['gt_sampling', 'placeholder', 'random_world_rotation']
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': False, 'DB_INFO_PATH': ['gt_database_info_ouster.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Pedestrian:5', 'Cyclist:5']}, 'SAMPLE_GROUPS': ['Car:20', 'Pedestrian:15', 'Cyclist:15'], 'NUM_POINT_FEATURES': 4, 'DATABASE_WITH_FAKELIDAR': False, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['y']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}]
2023-09-01 18:03:11,027   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.1, 0.1, 0.15], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 150000, 'test': 150000}}]
2023-09-01 18:03:11,028   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/xmu/xmu_dataset_ouster.yaml
2023-09-01 18:03:11,028   INFO  
cfg.MODEL = edict()
2023-09-01 18:03:11,028   INFO  cfg.MODEL.NAME: CenterPoint
2023-09-01 18:03:11,028   INFO  
cfg.MODEL.VFE = edict()
2023-09-01 18:03:11,028   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2023-09-01 18:03:11,028   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2023-09-01 18:03:11,028   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelResBackBone8x
2023-09-01 18:03:11,028   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2023-09-01 18:03:11,028   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2023-09-01 18:03:11,028   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2023-09-01 18:03:11,028   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2023-09-01 18:03:11,028   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2023-09-01 18:03:11,028   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5]
2023-09-01 18:03:11,028   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2023-09-01 18:03:11,028   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256]
2023-09-01 18:03:11,028   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2023-09-01 18:03:11,028   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256]
2023-09-01 18:03:11,028   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2023-09-01 18:03:11,028   INFO  cfg.MODEL.DENSE_HEAD.NAME: CenterHead
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.CLASS_NAMES_EACH_HEAD: [['Car', 'Pedestrian', 'Cyclist']]
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SHARED_CONV_CHANNEL: 64
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.USE_BIAS_BEFORE_NORM: True
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.NUM_HM_CONV: 2
2023-09-01 18:03:11,029   INFO  
cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG = edict()
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_ORDER: ['center', 'center_z', 'dim', 'rot']
2023-09-01 18:03:11,029   INFO  
cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT = edict()
2023-09-01 18:03:11,029   INFO  
cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center = edict()
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center.out_channels: 2
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center.num_conv: 2
2023-09-01 18:03:11,029   INFO  
cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center_z = edict()
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center_z.out_channels: 1
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.center_z.num_conv: 2
2023-09-01 18:03:11,029   INFO  
cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.dim = edict()
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.dim.out_channels: 3
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.dim.num_conv: 2
2023-09-01 18:03:11,029   INFO  
cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.rot = edict()
2023-09-01 18:03:11,029   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.rot.out_channels: 2
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.SEPARATE_HEAD_CFG.HEAD_DICT.rot.num_conv: 2
2023-09-01 18:03:11,030   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.FEATURE_MAP_STRIDE: 8
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.NUM_MAX_OBJS: 500
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.GAUSSIAN_OVERLAP: 0.1
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.MIN_RADIUS: 2
2023-09-01 18:03:11,030   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2023-09-01 18:03:11,030   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS = edict()
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.cls_weight: 1.0
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.loc_weight: 2.0
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.LOSS_WEIGHTS.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2023-09-01 18:03:11,030   INFO  
cfg.MODEL.DENSE_HEAD.POST_PROCESSING = edict()
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.SCORE_THRESH: 0.1
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.POST_CENTER_LIMIT_RANGE: [0, -75.2, -2, 150, 75.2, 4]
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.MAX_OBJ_PER_SAMPLE: 500
2023-09-01 18:03:11,030   INFO  
cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG = edict()
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2023-09-01 18:03:11,030   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.7
2023-09-01 18:03:11,031   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2023-09-01 18:03:11,031   INFO  cfg.MODEL.DENSE_HEAD.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2023-09-01 18:03:11,031   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2023-09-01 18:03:11,031   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2023-09-01 18:03:11,031   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: once
2023-09-01 18:03:11,031   INFO  
cfg.OPTIMIZATION = edict()
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 4
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.LR: 0.003
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2023-09-01 18:03:11,031   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2023-09-01 18:03:11,032   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2023-09-01 18:03:11,032   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 10
2023-09-01 18:03:11,032   INFO  cfg.TAG: centerpoint
2023-09-01 18:03:11,032   INFO  cfg.EXP_GROUP_PATH: xmu_ouster_models
2023-09-01 18:03:11,059   INFO  Loading XMU dataset of sensor ouster and mode train
2023-09-01 18:03:11,292   INFO  Total sequences of sensor ouster in mode train is 6000
2023-09-01 18:03:18,053   INFO  CenterPoint(
  (vfe): MeanVFE()
  (backbone_3d): VoxelResBackBone8x(
    (conv_input): SparseSequential(
      (0): SubMConv3d(4, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (conv1): SparseSequential(
      (0): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv2): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv3): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv4): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (map_to_bev_module): HeightCompression()
  (pfe): None
  (backbone_2d): BaseBEVBackbone(
    (blocks): ModuleList(
      (0): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
      (1): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
        (2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
    )
    (deblocks): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (dense_head): CenterHead(
    (shared_conv): Sequential(
      (0): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (heads_list): ModuleList(
      (0): SeparateHead(
        (center): Sequential(
          (0): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (center_z): Sequential(
          (0): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (hm): Sequential(
          (0): Sequential(
            (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
    )
    (hm_loss_func): FocalLossCenterNet()
    (reg_loss_func): RegLossCenterNet()
  )
  (point_head): None
  (roi_head): None
)
2023-09-01 18:03:18,055   INFO  **********************Start training xmu_ouster_models/centerpoint(default)**********************
epochs:   0%|          | 0/50 [00:00<?, ?it/s]
train:   0%|          | 0/6000 [00:00<?, ?it/s][ANone
epochs:   0%|          | 0/50 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "train.py", line 201, in <module>
    main()
  File "train.py", line 153, in main
    train_model(
  File "/home/djh/projects/xmuda/OpenPCDet/tools/train_utils/train_utils.py", line 111, in train_model
    accumulated_iter = train_one_epoch(
  File "/home/djh/projects/xmuda/OpenPCDet/tools/train_utils/train_utils.py", line 25, in train_one_epoch
    batch = next(dataloader_iter)
  File "/home/djh/core_environment/anaconda3/envs/pcdet/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 521, in __next__
    data = self._next_data()
  File "/home/djh/core_environment/anaconda3/envs/pcdet/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1186, in _next_data
    idx, data = self._get_data()
  File "/home/djh/core_environment/anaconda3/envs/pcdet/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1142, in _get_data
    success, data = self._try_get_data()
  File "/home/djh/core_environment/anaconda3/envs/pcdet/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 990, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/home/djh/core_environment/anaconda3/envs/pcdet/lib/python3.8/queue.py", line 179, in get
    self.not_empty.wait(remaining)
  File "/home/djh/core_environment/anaconda3/envs/pcdet/lib/python3.8/threading.py", line 306, in wait
    gotit = waiter.acquire(True, timeout)
  File "/home/djh/core_environment/anaconda3/envs/pcdet/lib/python3.8/site-packages/torch/utils/data/_utils/signal_handling.py", line 66, in handler
    _error_if_any_worker_fails()
RuntimeError: DataLoader worker (pid 11842) exited unexpectedly with exit code 1. Details are lost due to multiprocessing. Rerunning with num_workers=0 may give better error trace.

                                               [A